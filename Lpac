CNH <- function(seg_val, seg_len, ploidy = NULL, purity = NULL) {
  # 检查输入是否为相同长度的列向量
  if (!(is.vector(seg_val) && is.vector(seg_len) && length(seg_val) == length(seg_len))) {
    stop("Segment values and segment lengths should be column vectors of equal length")
  }
  
  # 检查 ploidy 是否为正标量或为空
  if (!is.null(ploidy) && !(is.numeric(ploidy) && length(ploidy) == 1 && ploidy > 0)) {
    stop("Ploidy is not a positive scalar or empty")
  }
  
  # 检查 purity 是否为 (0,1] 之间的数或为空
  if (!is.null(purity) && !(is.numeric(purity) && length(purity) == 1 && purity > 0 && purity <= 1)) {
    stop("Purity is not a positive scalar or empty")
  }
  
  # 指定 ploidy 和 purity 的默认搜索范围
  if (is.null(ploidy)) {
    ploidy <- seq(1.5, 5, 0.01)
  }
  if (is.null(purity)) {
    purity <- seq(0.2, 1, 0.01)
  }
  
  # 计算搜索空间的大小
  Nploidy <- length(ploidy)
  Npurity <- length(purity)
  
  # 初始化转换参数 a1 和 a2
  a1 <- numeric(Nploidy * Npurity)
  a2 <- numeric(Nploidy * Npurity)
  purity_all <- numeric(Nploidy * Npurity)
  ploidy_all <- numeric(Nploidy * Npurity)
  
  index <- 1
  for (i in seq_along(ploidy)) {
    for (j in seq_along(purity)) {
      a1[index] <- (purity[j] * ploidy[i] + 2 * (1 - purity[j])) / purity[j]
      a2[index] <- -2 * (1 - purity[j]) / purity[j]
      purity_all[index] <- purity[j]
      ploidy_all[index] <- ploidy[i]
      index <- index + 1
    }
  }
  
  # 初始化输出变量
  CNH_out <- 1
  purity_out <- 0
  ploidy_out <- 0
  
  # 进行网格搜索，计算 CNH
  for (i in seq_along(a1)) {
    q <- a1[i] * seg_val + a2[i]
    
    # 计算每个 segment 到最接近整数的距离
    q_dist_down <- q %% 1
    q_dist_up <- 1 - (q %% 1)
    q_dist_min <- pmin(q_dist_up, q_dist_down)
    
    # 计算加权 CNH
    CNHnew <- sum(q_dist_min * seg_len) / sum(seg_len)
    
    # 更新最优 CNH 结果
    if (CNHnew < CNH_out) {
      CNH_out <- CNHnew
      purity_out <- purity_all[i]
      ploidy_out <- ploidy_all[i]
    }
  }
  
  return(list(CNH_out = CNH_out, ploidy_out = ploidy_out, purity_out = purity_out))
}

LPAC <- function(bin_val) {
  # 获取输入数据的维度
  Nb <- nrow(bin_val)
  Ns <- ncol(bin_val)
  
  # 检查是否至少有两个样本
  if (Ns < 2) {
    stop("Input should consist of multiple samples (columns)")
  }
  
  # 检查数据是否标准化
  for (i in 1:Ns) {
    if (abs(mean(bin_val[, i]) - 1) > 0.02) {
      message <- sprintf("Input bin values (column %d) are not normalized", i)
      if (mean(bin_val[, i]) < 0.5 && abs(mean(2^bin_val[, i]) - 1) < 0.1) {
        message <- paste(message, "Input data appears to be log-transformed. Please provide non-log-transformed data.")
      }
      stop(message)
    }
  }
  
  # 初始化输出变量
  CNHout <- numeric(Ns)
  ploidies <- numeric(Ns)
  purities <- numeric(Ns)
  
  # STEP 1: 单样本拷贝数异质性推断
  for (i in 1:Ns) {
    result <- CNH(bin_val[, i], rep(1, Nb), NULL, NULL)
    CNHout[i] <- result[[1]]
    ploidies[i] <- result[[2]]
    purities[i] <- result[[3]]
  }
  
  # STEP 2: 单样本推断成功的判定标准
  step1_success <- !(ploidies < 2.5 & purities == 1)
  if (sum(step1_success) == 0) {
    LPAC_success <- FALSE
    best_sample <- rep(FALSE, Ns)
    return(list(LPAC_success = LPAC_success, ploidies = ploidies, purities = purities, CNH = CNHout, best_sample = best_sample))
  } else {
    LPAC_success <- TRUE
  }
  
  # STEP 3: 选择最佳单样本
  id <- which.min(CNHout[step1_success])
  best_sample <- rep(FALSE, Ns)
  best_sample[id] <- TRUE
  
  # STEP 4: 根据最佳样本推断其他样本的CNA
  a1 <- (purities[id] * ploidies[id] + (1 - purities[id]) * 2) / purities[id]
  a2 <- -2 * (1 - purities[id]) / purities[id]
  cna_abs_ref <- a1 * bin_val[, id] + a2
  
  alphas <- seq(0.1, 1, 0.01)
  taus <- seq(1.5, 5, 0.05)
  
  ids <- which(!best_sample)
  for (i in ids) {
    Dmin <- 1
    bin_val_test <- bin_val[, i]
    
    for (alpha in alphas) {
      for (tau in taus) {
        a1 <- (alpha * tau + (1 - alpha) * 2) / alpha
        a2 <- -2 * (1 - alpha) / alpha
        bin_val_test_abs <- a1 * bin_val_test + a2
        Dtest <- mean(abs(bin_val_test_abs - cna_abs_ref))
        
        if (Dtest < Dmin) {
          Dmin <- Dtest
          purities[i] <- alpha
          ploidies[i] <- tau
        }
      }
    }
    
    a1 <- (purities[i] * ploidies[i] + (1 - purities[i]) * 2) / purities[i]
    a2 <- -2 * (1 - purities[i]) / purities[i]
    cna_abs_test <- a1 * bin_val_test + a2
    CNHout[i] <- mean(pmin(abs(cna_abs_test %% 1), abs(1 - cna_abs_test %% 1)))
  }
  
  return(list(LPAC_success = LPAC_success, ploidies = ploidies, purities = purities, CNH = CNHout, best_sample = best_sample))
}
